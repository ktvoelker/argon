
; Options in the DEFAULT section are implicitly applied to all other sections.
[DEFAULT]
table = t

[global]
; the starting workspace
start = x

; A table is a grid. The width of each row and the height of each column are
; given in pixels.
[table t]
cols = 200 200
rows = 100 100

; A workspace has exactly one table and any number of tiles. A tile is
; attached to some part of the table. This attachment is specified by giving
; the coordinates of the upper-left table cell to which the tile is attached,
; followed by the size of the tile, given as the number of columns and rows
; the tile should span.
;
; Note that coordinates are given in X-Y order.
;
; Although making overlapping tiles probably won't crash KDWM, it also won't
; be useful!
[space x]
; tile "a"
a = 0 0 1 1
b = 0 1 1 1
c = 1 0 1 1
d = 1 1 1 1
; the starting tile
start = a

; This section defines the keybindings.
;
; Although it is not mandatory that you have any keybindings, it is
; mandatory that you have the section header!
;
; That warning might seem silly now, but in a future release there will be a
; socket interface for issuing commands to a running KDWM process, so a person
; playing clever tricks might not want any keybindings here.
;
; I don't know what happens if you try to bind the same key twice.
;
; So far, these commands have been implemented (with all-caps indicating
; text that you should replace with something sensible):
;
; focus_dir (up | down | left | right)
; space WORKSPACE
; exec PROGRAM ARG0 ARG1 ...
; seq COMMAND0 ; COMMAND1 ...
; quit
; kill
; next_win
; prev_win
;
; Note that the "seq" command requires the semicolons to be space-delimited,
; and there may be no trailing semicolon. An empty list of commands is legal,
; however. These rules will probably be made more liberal in future releases.
[keys]
; The last token of the option name is parsed as a standard X keysym.
; 
; All preceding tokens represent modifier keys which must also be held to
; activate this binding:
;
;   S  shift
;   C  control
;   1  mod1
;
; The other modifier keys are also supported in theory, but currently they
; are ignored. There is a global option that determines which modifiers are
; ignored, but it cannot yet be set from within the configuration file. If
; you want to change it, look for cIgnoreMask.
;   L  lock
;   2  mod2
;   3  mod3
;   4  mod4
;   5  mod5
S q = quit

