
TODO
====

Change the way floating windows are distinguished from tiled windows so that
there is less duplication of code. Also, create uniform types for workspace
and frame references. Frame references should always be fully qualified. The
focus should be a single TileRef in the World.

  Okay, so there will be these opaque types:
    type SpaceRef = SpaceRef { srSpace :: String }
    type TileRef = TileRef { trSpace :: String, trTile :: Maybe String }
  There will be these conversions:
    trSpaceRef :: TileRef -> SpaceRef
  There will be these accessors:
    getTileWindows :: World -> TileRef -> Queue Window
    getSpace :: (RefSpace a) => World -> a -> WSpace
    modifyTileWindows ::
      (Queue Window -> Queue Window) -> TileRef -> X11State ()
    getFocus :: World -> TileRef
    setFocus :: World -> TileRef -> X11State ()
    modifyFocusWindows ::
      (Queue Window -> Queue Window) -> X11State ()
  Classes:
    class RefSpace a where
      getSpaceRef :: a -> SpaceRef
    instance RefSpace SpaceRef
    instance RefSpace TileRef
  We should no longer need:
    wFocusSpace
    modifyFocusSpace

Catch window closing events in order to set the correct new focus.

Figure out how to force redrawing of window contents after Xnest has been
hidden.

Figure out why new windows were not appearing very quickly.
  Perhaps debug mode caused the problem.
  Make debug mode dynamically alterable via a Command.

Make an external, socket-based interface for executing Commands.

Move Collection stuff into a separate module re-exported by Types.

Implement Command.runCommand.

Implement buttonPressHandler to set the focus and pass the button press
through.

Finish mapRequestHandler and resizeRequestHandler so that floating windows go
where requested.

Add Commands for entering and leaving the move and resize modes for floating
windows.

Expand the key-handling system to also support handling mouse clicks (with the
same modifier support). It should be possible to bind separately on press and
release, so that the user can either do drag-based move and resize or
two-click move and resize.

Implement a timer system.

Implement statusbar support.

Implement user-defined event-handling support.

Write a Config module that reads a file containing a simpler config format.

Make floating workspaces keep a history of most-recently-focused windows and
allow that history to be accessed by commands.

