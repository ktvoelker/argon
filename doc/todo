
TODO
====


High-Priority Bugs
------------------


High-Priority Testing
---------------------
CFocus
CMove
Attraction


High-Priority Features
----------------------
Implement user-defined trigger support.
  under [global], "on ready"
  under [space x], "on enter" (ESpace)
  under [space x], "on enter x" (EFocus)


Medium Priority
---------------
Tabs on tiles showing what windows are present

Implement statusbar support.
  This requires a timer system.


Low Priority Bugs
-----------------
The window doesn't move or resize as fast as the mouse is moving in
move/resize mode. This might be caused by debug mode or Xnest.


Low Priority Features
---------------------
Add support for setting cIgnoreMask from INI config files.

Floating support in focusDir

Improve the handling of errors in the configuration.

When a button press event hits the root window, determine which tile it is
within and focus that tile.

Make an external, socket-based interface for executing Commands.

Keep a per-tile history of most-recently-focused windows.

Visually indicate the focus, perhaps by a colored border.

Check for invalid space and tile refs in runCommand.

Make the language of commands and tile queries more robust by using a proper
grammar in Config.INI.


Low Priority Refactoring
------------------------
Create a single, uniform abstraction for getting the whole value, or a
projected value, from any reader or state monad and use it everywhere.

Generalize monadic functions as much as possible. Most functions should be
able to operate in something more general than X11State.

Audit all functions that run in X11State to see if this is really necessary.
Ideally, break any complex X11State function into two parts, one of which is
pure. The impure part will do three things, the existent permutations of which
should be codified as functions:

  1. Read some of the state and pass it along to the pure function.
  2. Use the return value of the pure function to modify the state.
     (Simplifying assumption: you can only modify what you read.)
  3. Pass the return value of the pure function along as the monadic result.

  Number 1 will be done nearly all of the time. It won't hurt to simply assume
  that it will be done all the time.

  Numbers 2 and 3 can be used individually or together, but one or the other
  must be used. Thus, there are three permutations of actions which can occur:

  1,2,3 1,2 1,3

  1,2 is encapsulated by:
    modifyWorld f
  or, for a particular field:
    modifyWorld $ $(upd 'field) f
  Should the field-specific case be abstracted?

  1,3 is probably written most of the time like this:
    getWorld >>= return . f
  Should this case be abstracted? (Perhaps call it withWorld.)

  1,2,3 has come up a few times and been rudely ignored. It would look like:
    withModifyWorld :: (World -> (a, World)) -> m a

Generate a function dependency graph and see if there are better ways of
organizing the functions into modules.

Decide whether the Action system is worth keeping. It isn't used consistently,
and a lot of our X11 calls (like mapWindow, et cetera) are fairly simple and
probably don't deserve the overhead of constructing an Action and putting it
in the queue.
  
  A mixture of using Actions and not using them is bad because X11 calls may
  not be carried out in the intended order, since all calls made through
  Actions will happen last. Perhaps, instead of the heavyweight Actions
  system, we should just have a uniform module which abstracts over X11 with
  a direct, simple API?

Move Collection stuff into a separate module re-exported by Types.
  Make the Collection interface into multiple, better interfaces.

Produce more detailed, informative error messages in Config.INI.


Low Priority Bugs and Mysteries
-------------------------------
Do something better with windows that exist when the window manager starts.
  Right now, we attach standard events to them and then forget that they exist.

Figure out why Xnest segfaults when killing it after the WM has quit.

Figure out why xev got an unending stream of zero keypresses.
  Perhaps this has something to do with Xnest?

Add support for expressions in INI config files.
  In expressions, allow variable references to anything in XInfo.

