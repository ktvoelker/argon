
PROBLEMS
========

CFocusDir Right doesn't work properly.
  New windows continue to appear in the left tile
  Actually, this may not be the case now that tileIsFloat has been fixed.

Window contents are not immediately redrawn when Xnest is hidden and then
revealed.

New windows take a long time to appear.
  Perhaps debug mode causes the problem.


FEATURES
========

Make debug mode dynamically alterable via a Command.

Make an external, socket-based interface for executing Commands.

Move Collection stuff into a separate module re-exported by Types.

Implement Command.runCommand.

Implement buttonPressHandler to set the focus and pass the button press
through.

Finish mapRequestHandler and resizeRequestHandler so that floating windows go
where requested.

Add Commands for entering and leaving the move and resize modes for floating
windows.

Expand the key-handling system to also support handling mouse clicks (with the
same modifier support). It should be possible to bind separately on press and
release, so that the user can either do drag-based move and resize or
two-click move and resize.

Implement a timer system.

Implement statusbar support.

Implement user-defined event-handling support.

Write a Config module that reads a file containing a simpler config format.

Make floating workspaces keep a history of most-recently-focused windows and
allow that history to be accessed by commands.

Change the Debug module to support heirarchical debug logging.
  The fundamental debug function would be:
    debug :: (MonadIO m) => DebugLevel -> String -> m a -> m a
  This would create a new log node n named after the given String.
  Any log node output by the monadic action would be a child of n.
  The node would also be annotated with its DebugLevel, so unimportant nodes
    could later be filtered out.
  The log would be in a format such as XML which can be written before the
    entire tree is known. This is important both for memory consumption and
    for interactive debugging.
  The system should have an X11 error handler which cleans up the debug log
    by closing all open nodes, if using XML. If using a format in which nodes
    require no explicit closure, this is not a problem. However, XML would
    probably be the easiest format to work with, given the wide availability
    of XPath tools.
  It should be relatively easy to ensure that the output is safe XML. The
    element names will be static, so only attribute and text content will be
    generated from input to the debugging system. There are very few
    characters which need to be escaped: just & and > in text, and just
    &, >, and " in attributes. In fact, attributes may never require escaping
    if they are only used in statically-known ways as well, which is likely
    to be the case.
  We could get fancier by using SYB/reflection to output structured data
    values more nicely. But this could be dangerous with infinite values,
    and it would be a lot of work, so let's just use the Show implementation
    for now.

