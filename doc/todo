
TODO
====


High-Priority Bugs
------------------
The attraction for Pidgin conversations in my config is only using the tiles on
the bottom row.

CQuit causes a hang.


High-Priority Testing
---------------------


High-Priority Features
----------------------
Get rid of statusbar code.

Make an external, socket-based interface for executing Commands.

  General:

    Create a new Parse module which contains the code to parse commands, tile
    queries, and socket references.

    Define a default socket somewhere.

  The server:

    Allow the socket to be specified in the Config.

    Create two threads: one listens for X events, the other listens for socket
    connections. Both share a common channel back to the main thread, which
    uses that channel to listen for both kinds of communication simultaneously.

    The X event passed through the channel should be in the high-level
    representation.

    Determine if it is safe to listen for another X event in the second thread
    while the main thread is calling other Xlib functions.

      If it isn't, the main thread will have to pass a message through another
      channel to indicate that listening should begin again, which it will do
      once the first event has been processed.

    The socket-listening thread shouldn't just give incoming connections to the
    main thread to deal with, because the main thread wouldn't be able to
    respond to X events while reading from the handle. Instead, spawn a new
    thread for each incoming connection. That new thread will read all the
    input, ensure that the connection has been closed, and parse the input.

      If there are any parse errors, the auxiliary thread can respond with
      an error message without consulting the main thread.

      Otherwise, pass the Command to the main thread for execution. If
      multiple Commands were given, combine them with Seq.

      The message sent to the main thread will also include a handle to the
      auxiliary thread so that response text can be sent back.

        Change the type of runCommand to (Command -> X11State Response).

        data Response =
          Response { rTo :: Command, rText :: String, rOK :: Bool }

        Turn the Response into text in the auxiliary thread.

      This model prevents a user of the client from executing a command that
      produces a response and then using that response to affect the execution
      of later commands on the same connection. That is okay.

  The client:

    The client should be a separate binary from the server. Cabal should be
    able to accomplish this.

    The client should accept optional command-line arguments describing the
    socket to open.

    Pass all input from standard input to the server.

    This program is effectively netcat specialized to understand the Argon
    language for describing a socket to open and aware of the default socket.


0.2.0 Release
-------------
Finish high-priority features.
Do some system testing. (Put it into real use.)
Release on: Github
Mention on: Bloggish
Make a release on Github which statically links the GHC RTS.
Also include a binary with debug and sync enabled.
  Request a debug log with each error report.


0.3.0 Release
-------------
Avoid new features.
Refactor.
Write unit tests.
Release on: Hackage, AUR, Github
Mention on: Bloggish, Reddit, csh.noise


Medium Priority
---------------
Tabs on tiles showing what windows are present

Draw a border around each window

Color the border and tab of the focused window


Low Priority Bugs
-----------------
The window doesn't move or resize as fast as the mouse is moving in
move/resize mode. This might be caused by debug mode or Xnest.


Low Priority Features
---------------------
Make triggers more powerful by using tile queries.

  Also, add space queries.

  Also, add complements to TSpace and TFocus which are triggered when the
  focus leaves a space or tile.

  Create a separate, single config section for triggers. Since we are using
  queries to identify spaces, it would be silly to associate triggers with
  particular spaces.

Check the Config at startup for incorrect references.

Make CKill act on a TileQuery.

Add support for setting cIgnoreMask from INI config files.

Floating support in focusDir

Improve the handling of errors in the configuration.

When a button press event hits the root window, determine which tile it is
within and focus that tile.

Keep a per-tile history of most-recently-focused windows.

Make the language of commands and tile queries more robust by using a proper
grammar in Config.INI.

  Don't support the DEFAULT section.

  Also, don't use the ConfigFile module. It doesn't allow empty sections,
  and its interface is frustrating.

  Parse in three passes:

    1. Tokenize from characters into generic word, punctuation, and newline
       tokens.

    2. Tokenize from those tokens into higher-level tokens: start of section
       and entry.

    3. Parse from those tokens into an AST of sections and entries.
       This step is fairly trivial, but separating it from step 2 might
       produce better error messages.

  Then, process the AST into a richer AST of sections and entries, with unique
  node constructors for each kind of section and entry.

  Then, process that AST into a Config while performing verification.

Consistently use hyphens as word separators in Config.INI, not underscores.


Low Priority Refactoring
------------------------
Make the CDestroy and CKill commands accept tile queries.

Create a single, uniform abstraction for getting the whole value, or a
projected value, from any reader or state monad and use it everywhere.

Generalize monadic functions as much as possible. Most functions should be
able to operate in something more general than X11State.

Audit all functions that run in X11State to see if this is really necessary.
Ideally, break any complex X11State function into two parts, one of which is
pure. The impure part will do three things, the existent permutations of which
should be codified as functions:

  1. Read some of the state and pass it along to the pure function.
  2. Use the return value of the pure function to modify the state.
     (Simplifying assumption: you can only modify what you read.)
  3. Pass the return value of the pure function along as the monadic result.

  Number 1 will be done nearly all of the time. It won't hurt to simply assume
  that it will be done all the time.

  Numbers 2 and 3 can be used individually or together, but one or the other
  must be used. Thus, there are three permutations of actions which can occur:

  1,2,3 1,2 1,3

  1,2 is encapsulated by:
    modifyWorld f
  or, for a particular field:
    modifyWorld $ $(upd 'field) f
  Should the field-specific case be abstracted?

  1,3 is probably written most of the time like this:
    getWorld >>= return . f
  Should this case be abstracted? (Perhaps call it withWorld.)

  1,2,3 has come up a few times and been rudely ignored. It would look like:
    withModifyWorld :: (World -> (a, World)) -> m a

Generate a function dependency graph and see if there are better ways of
organizing the functions into modules.

Move Collection stuff into a separate module re-exported by Types.
  Make the Collection interface into multiple, better interfaces.

Produce more detailed, informative error messages in Config.INI.

Make a single module which abstracts over all X11 calls.
  The interface presented should use the types from Maths.
  The interface should never require a Display argument.

Write up some conventions for the use of spacing, line breaks, delimeters,
curly-brace syntax, and making things line up vertically.


Low Priority Bugs and Mysteries
-------------------------------
Do something better with windows that exist when the window manager starts.
  Right now, we attach standard events to them and then forget that they exist.

Figure out why Xnest segfaults when killing it after the WM has quit.

Figure out why xev got an unending stream of zero keypresses.
  Perhaps this has something to do with Xnest?

Add support for expressions in INI config files.
  In expressions, allow variable references to anything in XInfo.

