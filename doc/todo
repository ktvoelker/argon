
TODO
====

Once the "PROBLEMS" and "CORE FUNCTIONALITY" sections have been completed,
an initial release will be made, including:

1. A Cabal package
2. A website
3. A post on bloggish.net
4. User documentation


PROBLEMS
--------

New windows take a long time to appear.
  Perhaps debug mode causes the problem.

Window contents are not immediately redrawn when Xnest is hidden and then
revealed.


CORE FUNCTIONALITY
------------------
Unmap a window whenever it is no longer atop a tile.
  Replace the window queues with double-ended queues. Find a more efficient
  IO-based queue type. Wrap that queue type in another type, and implement
  the four main operations (insert_front, insert_back, extract_front,
  extract_back) in the X11State monad. So, instead of ever touching the queue
  itself, the program can simply provide the TileRef.

  Then, these functions can correctly (and efficiently) ensure that windows
  are mapped and unmapped according to whether or not they are at the front of
  the queue.

  The queue will need to also know whether or not it is tiling. In the floating
  case, a change in queue ordering doesn't mean any windows should be mapped
  or unmapped; rather, it means that all the windows need to be restacked.

  The queue also needs a way to be signalled that its workspace has just been
  activated, in which case it must map the top window or restack all the
  windows.

  XUnmapWindow(disp, win)
  XMapWindow(disp, win)

  Let's implement the queue ourselves, as an exercise in using whatever the
  appropriate construct is for this.

Command.runCommand
  CSpace
  CKillWin
    XDestroyWindow(disp, win)

buttonPressHandler

Config.config (as a parser of an external configuration file)

Cabal-based build system (try doing it from scratch, and use ghc --make's
output to determine exactly what package versions to require if it doesn't
seem to work).


FLOATING FUNCTIONALITY
----------------------
mapRequestHandler

resizeRequestHandler

focusDir

Move and resize modes
  Commands for setting what keyboard modifiers active these modes
  Command for setting Drag Mode versus Two-Click Mode


FEATURES
--------

Tabs on tiles showing what windows are present

Make an external, socket-based interface for executing Commands.

Move Collection stuff into a separate module re-exported by Types.

Add Commands for entering and leaving the move and resize modes for floating
windows.

Expand the key-handling system to also support handling mouse clicks (with the
same modifier support). It should be possible to bind separately on press and
release, so that the user can either do drag-based move and resize or
two-click move and resize.

Implement a timer system.

Implement statusbar support.

Implement user-defined event-handling support.

Keep a per-tile history of most-recently-focused windows and allow that
history to be accessed by commands.

Visually indicate the focus, perhaps by a colored border.

