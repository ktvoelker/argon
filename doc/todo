
TODO
====


High-Priority Bugs
------------------


High-Priority Testing
---------------------
CFocus
CMove
CShowFloat
Attraction
Triggers


High-Priority Features
----------------------
Implement statusbar support.

  1. Fix Config and World so that if two spaces use the same statusbar, they
     will truly share it (so the updates don't happen twice). Ensure that
     the World contains a mapping from StatusRef to Window.

  2. Implement a generic timer system, which is just a module that defines a
     type of priority queues that sort by time in ascending order, and
     provide two access functions: insert and remove, where remove will remove
     all items up to the current time.

  3. Implement one specific timer queue in the World, just for statusbar
     updates. The values in this queue will be StatusRefs.

  4. Create all the statusbar windows during initialization and populate the
     World with them before going into the event loop.

  5. Add all statusbar tiles to the timer queue during initialization before
     entering the event loop.

  6. Add a phase to the event loop in which the statusbar timers are removed
     and executed.

  7. Implement statusbar timer execution:
     a. Run the command
     b. Calculate the position inside the statusbar window
     c. Calculate the size of the tile inside the statusbar window
     d. Clear the tile
     e. Write the text into the tile

  8. Add statusbar support to Config.INI:
     [statusbar foo]
     layout = whatever
     ; a tile defined by the layout
     a = something to execute
     ; the resolution of a (in seconds)
     res a = 15
     ; another tile defined by the layout
     b = something else to execute
     [space bar]
     statusbar = foo


0.2.0 Release
-------------
Finish high-priority features.
Do some system testing. (Put it into real use.)
Release on: Github
Mention on: Bloggish
Make a release on Github which statically links the GHC RTS.


0.3.0 Release
-------------
Avoid new features.
Write unit tests.
Release on: Hackage, AUR, Github
Mention on: Bloggish, Reddit, csh.noise


Medium Priority
---------------
Tabs on tiles showing what windows are present


Low Priority Bugs
-----------------
The window doesn't move or resize as fast as the mouse is moving in
move/resize mode. This might be caused by debug mode or Xnest.


Low Priority Features
---------------------
Static checking of Config at startup for incorrect references.

Make CKill act on a TileQuery.

Add support for setting cIgnoreMask from INI config files.

Floating support in focusDir

Improve the handling of errors in the configuration.

When a button press event hits the root window, determine which tile it is
within and focus that tile.

Make an external, socket-based interface for executing Commands.

Keep a per-tile history of most-recently-focused windows.

Visually indicate the focus, perhaps by a colored border.

Check for invalid space and tile refs in runCommand.

Make the language of commands and tile queries more robust by using a proper
grammar in Config.INI.


Low Priority Refactoring
------------------------
Create a single, uniform abstraction for getting the whole value, or a
projected value, from any reader or state monad and use it everywhere.

Generalize monadic functions as much as possible. Most functions should be
able to operate in something more general than X11State.

Audit all functions that run in X11State to see if this is really necessary.
Ideally, break any complex X11State function into two parts, one of which is
pure. The impure part will do three things, the existent permutations of which
should be codified as functions:

  1. Read some of the state and pass it along to the pure function.
  2. Use the return value of the pure function to modify the state.
     (Simplifying assumption: you can only modify what you read.)
  3. Pass the return value of the pure function along as the monadic result.

  Number 1 will be done nearly all of the time. It won't hurt to simply assume
  that it will be done all the time.

  Numbers 2 and 3 can be used individually or together, but one or the other
  must be used. Thus, there are three permutations of actions which can occur:

  1,2,3 1,2 1,3

  1,2 is encapsulated by:
    modifyWorld f
  or, for a particular field:
    modifyWorld $ $(upd 'field) f
  Should the field-specific case be abstracted?

  1,3 is probably written most of the time like this:
    getWorld >>= return . f
  Should this case be abstracted? (Perhaps call it withWorld.)

  1,2,3 has come up a few times and been rudely ignored. It would look like:
    withModifyWorld :: (World -> (a, World)) -> m a

Generate a function dependency graph and see if there are better ways of
organizing the functions into modules.

Move Collection stuff into a separate module re-exported by Types.
  Make the Collection interface into multiple, better interfaces.

Produce more detailed, informative error messages in Config.INI.

Make a single module which abstracts over all X11 calls.
  The interface presented should use the types from Maths.
  The interface should never require a Display argument.


Low Priority Bugs and Mysteries
-------------------------------
Do something better with windows that exist when the window manager starts.
  Right now, we attach standard events to them and then forget that they exist.

Figure out why Xnest segfaults when killing it after the WM has quit.

Figure out why xev got an unending stream of zero keypresses.
  Perhaps this has something to do with Xnest?

Add support for expressions in INI config files.
  In expressions, allow variable references to anything in XInfo.

