
Make an external, socket-based interface for executing Commands.

  General:

    Create a new Parse module which contains the code to parse commands, tile
    queries, and socket references.

    Define a default socket somewhere.

  The server:

    Allow the socket to be specified in the Config.

    Create two threads: one listens for X events, the other listens for socket
    connections. Both share a common channel back to the main thread, which
    uses that channel to listen for both kinds of communication simultaneously.

    The X event passed through the channel should be in the high-level
    representation.

    Determine if it is safe to listen for another X event in the second thread
    while the main thread is calling other Xlib functions.

      If it isn't, the main thread will have to pass a message through another
      channel to indicate that listening should begin again, which it will do
      once the first event has been processed.

    The socket-listening thread shouldn't just give incoming connections to the
    main thread to deal with, because the main thread wouldn't be able to
    respond to X events while reading from the handle. Instead, spawn a new
    thread for each incoming connection. That new thread will read all the
    input, ensure that the connection has been closed, and parse the input.

      If there are any parse errors, the auxiliary thread can respond with
      an error message without consulting the main thread.

      Otherwise, pass the Command to the main thread for execution. If
      multiple Commands were given, combine them with Seq.

      The message sent to the main thread will also include a handle to the
      auxiliary thread so that response text can be sent back.

        Change the type of runCommand to (Command -> X11State Response).

        data Response =
          Response { rTo :: Command, rText :: String, rOK :: Bool }

        Turn the Response into text in the auxiliary thread.

      This model prevents a user of the client from executing a command that
      produces a response and then using that response to affect the execution
      of later commands on the same connection. That is okay.

  The client:

    The client should be a separate binary from the server. Cabal should be
    able to accomplish this.

    The client should accept optional command-line arguments describing the
    socket to open.

    Pass all input from standard input to the server.

    This program is effectively netcat specialized to understand the Argon
    language for describing a socket to open and aware of the default socket.

